#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <map>
using namespace std;
FILE *f=fopen("sort2dist.in","r");
FILE *g=fopen("sort2dist.out","w");
int N,i,d,st,dr,tmp,lung;
char C[1005][40],pivot[40],sortat[1005][40];
pair<int,int> sol[12505];
int nr;
map<string,int> M;
int cmp(char C1[],char C2[])
{
    int a,b;
    a=strlen(C1);
    b=strlen(C2);
    if(a>b)
        return -1;
    if(b<a)
        return 1;
}
void qs(int st,int dr)
{
    strcpy(pivot,sortat[(st+dr)/2]);
    int i=st,j=dr;
    while(i<=j)
    {
        while(cmp(sortat[i],pivot)==-1)
            i++;
        while(cmp(sortat[j],pivot)==1)
         j--;
        if(i<=j)
        {
            swap(sortat[i],sortat[j]);
            i++;j--;
        }
    }
    if(st<j)
        qs(st,j);
    if(i<dr)
        qs(i,dr);
}
int main()
{
    fscanf(f,"%d\n",&N);
    for(i=1;i<=N;i++)
    {
        fgets(C[i],40,f);
        M[C[i]]=i;
        strcpy(sortat[i],C[i]);
    }
    qs(1,N);
    for(i=N;i>0;i--)
    {
            d=i-M[sortat[i]];
            st=M[sortat[i]];
            while(d>0)
            {
                dr=st+((d^(d-1))&d);
                sol[++sol[0].first]=make_pair(st,dr);
                tmp=M[C[st]];
                M[C[st]]=M[C[dr]];
                M[C[dr]]=tmp;
                swap(C[st],C[dr]);
                st=dr;
                d=d-((d^(d-1))&d);
            }
    }
    fprintf(g,"%d\n",sol[0].first);
    for(i=1;i<=sol[0].first;i++)
        fprintf(g,"%d %d\n",sol[i].first,sol[i].second);
    fclose(f);
    fclose(g);
    return 0;
}
